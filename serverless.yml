service: barracoes-covid-19
app: barracoes-covid-19
org: rodrigogs

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-finch
  - serverless-pseudo-parameters

package:
  individually: true

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
  client:
    bucketName: '${self:service}-${self:provider.stage}-webapp'
    distributionFolder: 'frontend/dist'
  configsTableName: '${self:service}-${self:provider.stage}-configs'
  doctorsTableName: '${self:service}-${self:provider.stage}-doctors'
  patientsTableName: '${self:service}-${self:provider.stage}-patients'

provider:
  name: aws
  profile: covid-19
  runtime: nodejs12.x
  stage: ${opt:stage, 'development'}
  region: sa-east-1
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'logs:*'
      Resource: '*'
    - Effect: Allow
      Action:
        - 'dynamodb:*'
      Resource: '*'
  environment:
    CONFIGS_TABLE: ${self:custom.configsTableName}
    DOCTORS_TABLE: ${self:custom.doctorsTableName}
    PATIENTS_TABLE: ${self:custom.patientsTableName}


functions:
  doctorAuthorizer:
    handler: functions/api/doctor-authorizer.handler

  adminAuthorizer:
    handler: functions/api/admin-authorizer.handler

  healthcheck:
    handler: functions/api/healthcheck.handler
    events:
      - http:
          method: get
          path: /
          cors: true

  auth:
    handler: functions/api/auth.handler
    events:
      - http:
          method: post
          path: '/auth/login'
          cors: true

  doctors:
    handler: functions/api/doctors.handler
    events:
      - http:
          method: get
          path: '/doctors/cep/{cep}'
          cors: true
          authorizer: adminAuthorizer

      - http:
          method: get
          path: '/doctors/username/{username}'
          cors: true
          authorizer: adminAuthorizer

      - http:
          method: post
          path: '/doctors'
          cors: true
          authorizer: adminAuthorizer

      - http:
          method: post
          path: '/doctors/{username}'
          cors: true
          authorizer: adminAuthorizer

  patients:
    handler: functions/api/patients.handler
    events:
      - http:
          method: get
          path: '/patients/cep/{cep}'
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: get
          path: '/patients/ticket/{ticket}'
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: post
          path: '/patients'
          cors: true

      - http:
          method: post
          path: '/patients/{ticket}'
          cors: true
          authorizer: adminAuthorizer

  sheds:
    handler: functions/api/sheds.handler
    events:
      - http:
          method: get
          path: '/sheds/cep/{cep}'
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: get
          path: '/sheds/id/{id}'
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: post
          path: '/sheds'
          cors: true
          authorizer: adminAuthorizer

      - http:
          method: post
          path: '/sheds/{id}'
          cors: true
          authorizer: adminAuthorizer

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    # DynamoDB Tables
    ConfigsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.configsTableName}
        AttributeDefinitions:
          - AttributeName: partition
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
        KeySchema:
          - AttributeName: partition
            KeyType: HASH
          - AttributeName: sort
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    DoctorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.doctorsTableName}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
          - AttributeName: cep
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        GlobalSecondaryIndexes:
          - IndexName: cep
            KeySchema:
              - AttributeName: cep
                KeyType: HASH
              - AttributeName: sort
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
    PatientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.patientsTableName}
        AttributeDefinitions:
          - AttributeName: ticket
            AttributeType: S
          - AttributeName: cep
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
        KeySchema:
          - AttributeName: ticket
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        GlobalSecondaryIndexes:
          - IndexName: cep
            KeySchema:
              - AttributeName: cep
                KeyType: HASH
              - AttributeName: sort
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
