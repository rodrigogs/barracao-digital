service: barracao-digital
app: barracao-digital
org: rodrigogs

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-finch
  - serverless-domain-manager

package:
  individually: true

custom:
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'sa-east-1'}
  webpack:
    webpackConfig: webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
  client:
    bucketName: ${self:service}-${self:provider.stage}-webapp
    distributionFolder: frontend/dist
  customDomain:
    domainName: api.barracaodigital.com
    basePath: ${self:provider.stage}
    stage: ${self:provider.stage}
    certificateName: '*.barracaodigital.com'
    createRoute53Record: true
  # Tables
  configsTableName: ${self:service}-${self:provider.stage}-configs-table
  doctorsTableName: ${self:service}-${self:provider.stage}-doctors-table
  patientsTableName: ${self:service}-${self:provider.stage}-patients-table
  facilitiesTableName: ${self:service}-${self:provider.stage}-facilities-table
  reportsTableName: ${self:service}-${self:provider.stage}-reports-table

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  versionFunctions: false
  logRetentionInDays: 5
  stackTags:
    STACK: ${self:service}
    STAGE: ${self:custom.stage}
    REGION: ${self:custom.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'logs:*'
      Resource: '*'
    - Effect: Allow
      Action:
        - 'dynamodb:*'
      Resource: 'arn:aws:dynamodb:${self:custom.region}:${file(./serverless.js):getAccountId}:table/${self:service}-${self:custom.stage}-*'
    - Effect: Allow
      Action:
        - 'events:*'
      Resource: 'arn:aws:events:${self:custom.region}:${file(./serverless.js):getAccountId}:rule/*'
    - Effect: Allow
      Action:
        - 'lambda:*'
      Resource: 'arn:aws:lambda:${self:custom.region}:${file(./serverless.js):getAccountId}:function:${self:service}-${self:custom.stage}-*'
  deploymentBucket:
    name: ${self:service}-deploys
    maxPreviousDeploymentArtifacts: 10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
  environment:
    AWS_ACCOUNT_ID: ${file(./serverless.js):getAccountId}
    STACK_NAME: ${self:service}
    STAGE: ${self:custom.stage}
    APP_URL: ${env:APP_URL}
    GOOGLE_APPLICATION_CREDENTIALS: ${env:GOOGLE_APPLICATION_CREDENTIALS}
    OPENTOK_API_KEY: ${env:OPENTOK_API_KEY}
    OPENTOK_API_SECRET: ${env:OPENTOK_API_SECRET}
    DOCTOR_INACTIVITY_TIMEOUT_IN_MINUTES: ${env:DOCTOR_INACTIVITY_TIMEOUT_IN_MINUTES, '35'}
    CONFIGS_TABLE: ${self:custom.configsTableName}
    DOCTORS_TABLE: ${self:custom.doctorsTableName}
    PATIENTS_TABLE: ${self:custom.patientsTableName}
    FACILITIES_TABLE: ${self:custom.facilitiesTableName}
    REPORTS_TABLE: ${self:custom.reportsTableName}

functions:
  # Jobs
  alternate-doctor-job:
    handler: functions/jobs/alternate-doctor-job.handler
    memorySize: 1024
    timeout: 30

  # Authorizers
  doctorAuthorizer:
    handler: functions/api/doctor-authorizer.handler

  adminAuthorizer:
    handler: functions/api/admin-authorizer.handler

  masterAuthorizer:
    handler: functions/api/master-authorizer.handler

  # API
  healthcheck:
    handler: functions/api/healthcheck.handler
    events:
      - http:
          method: GET
          path: /
          cors: true

  # Auth
  auth:
    handler: functions/api/auth.handler
    events:
      - http:
          method: POST
          path: /auth/login
          cors: true

  # Doctors
  doctors-get:
    handler: functions/api/doctors/get.handler
    events:
      - http:
          method: GET
          path: /doctors
          cors: true
          authorizer: adminAuthorizer

      - http:
          method: GET
          path: /doctors/cep/{cep}
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: GET
          path: /doctors/username/{username}
          cors: true
          authorizer: doctorAuthorizer

  doctors-post:
    handler: functions/api/doctors/post.handler
    memorySize: 512
    timeout: 30
    events:
      - http:
          method: POST
          path: /doctors
          cors: true
          authorizer: adminAuthorizer

      - http:
          method: POST
          path: /doctors/alternate
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: POST
          path: /doctors/conversation/{ticket}
          cors: true
          authorizer: doctorAuthorizer

  doctors-put:
    handler: functions/api/doctors/put.handler
    events:
      - http:
          method: PUT
          path: /doctors/{username}
          cors: true
          authorizer: doctorAuthorizer

  doctors-delete:
    handler: functions/api/doctors/delete.handler
    events:
      - http:
          method: DELETE
          path: /doctors/{username}
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: DELETE
          path: /doctors/conversation/{ticket}
          cors: true
          authorizer: doctorAuthorizer

  # Patients
  patients-get:
    handler: functions/api/patients/get.handler
    events:
      - http:
          method: GET
          path: /patients/cep/{cep}
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: GET
          path: /patients/ticket/{ticket}
          cors: true

  patients-post:
    handler: functions/api/patients/post.handler
    events:
      - http:
          method: POST
          path: /patients
          cors: true

  patients-put:
    handler: functions/api/patients/put.handler
    events:
      - http:
          method: PUT
          path: /patients/{ticket}
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: PUT
          path: /patients/{ticket}/feedback
          cors: true

      - http:
          method: PUT
          path: /patients/{ticket}/status/ongoing
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: PUT
          path: /patients/{ticket}/status/waiting_kit
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: PUT
          path: /patients/{ticket}/status/received_kit
          cors: true

      - http:
          method: PUT
          path: /patients/{ticket}/status/sent_kit
          cors: true

      - http:
          method: PUT
          path: /patients/{ticket}/status/finished
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: PUT
          path: /patients/{ticket}/status/gave_up
          cors: true

      - http:
          method: PUT
          path: /patients/{ticket}/messaging/token
          cors: true

  patients-delete:
    handler: functions/api/patients/delete.handler
    events:
      - http:
          method: DELETE
          path: /patients/{ticket}/video
          cors: true

  # Facilities
  facilities-get:
    handler: functions/api/facilities/get.handler
    memorySize: 1024
    timeout: 30
    events:
      - http:
          method: GET
          path: /facilities
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: GET
          path: /facilities/origin/{origin}
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: GET
          path: /facilities/origin/{origin}/destinations
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: GET
          path: /facilities/origin/{origin}/check
          cors: true

  facilities-post:
    handler: functions/api/facilities/post.handler
    events:
      - http:
          method: POST
          path: /facilities
          cors: true
          authorizer: masterAuthorizer

  facilities-put:
    handler: functions/api/facilities/put.handler
    memorySize: 1024
    timeout: 30
    events:
      - http:
          method: PUT
          path: /facilities/{origin}
          cors: true
          authorizer: masterAuthorizer

  facilities-delete:
    handler: functions/api/facilities/delete.handler
    events:
      - http:
          method: DELETE
          path: /facilities/{origin}
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: DELETE
          path: /facilities/{origin}/destinations
          cors: true
          authorizer: masterAuthorizer

  # Reports
  reports-post:
    handler: functions/api/reports/post.handler
    memorySize: 1024
    timeout: 30
    events:
      - http:
          method: POST
          path: /reports/facility/{origin}
          cors: true
          authorizer: doctorAuthorizer

resources:
  - ${file(resources/api-gateway-cf-resources.yml)}
  - ${file(resources/cloudfront-cf-resources.yml)}
  - ${file(resources/dynamodb-cf-resources.yml)}
