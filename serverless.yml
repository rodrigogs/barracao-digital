service: barracao-digital
app: barracao-digital
org: rodrigogs

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-finch
  - serverless-domain-manager

package:
  individually: true

custom:
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'sa-east-1'}
  webpack:
    webpackConfig: webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
  client:
    bucketName: ${self:service}-${self:provider.stage}-webapp
    distributionFolder: frontend/dist
  customDomain:
    domainName: api.barracaodigital.com
    basePath: ${self:provider.stage}
    stage: ${self:provider.stage}
    certificateName: '*.barracaodigital.com'
    createRoute53Record: true
  configsTableName: ${self:service}-${self:provider.stage}-configs
  doctorsTableName: ${self:service}-${self:provider.stage}-doctors
  patientsTableName: ${self:service}-${self:provider.stage}-patients
  facilitiesTableName: ${self:service}-${self:provider.stage}-facilities

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  versionFunctions: false
  logRetentionInDays: 5
  stackTags:
    STACK: ${self:service}
    STAGE: ${self:custom.stage}
    REGION: ${self:custom.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'logs:*'
      Resource: '*'
    - Effect: Allow
      Action:
        - 'dynamodb:*'
      Resource: '*'
    - Effect: Allow
      Action:
        - 'events:*'
      Resource: 'arn:aws:events:*:*:rule/*'
    - Effect: Allow
      Action:
        - 'lambda:*'
      Resource: '*'
  deploymentBucket:
    name: ${self:service}-deploys
    maxPreviousDeploymentArtifacts: 10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
  environment:
    AWS_ACCOUNT_ID: ${file(./serverless.js):getAccountId}
    STACK_NAME: ${self:service}
    STAGE: ${self:custom.stage}
    CONFIGS_TABLE: ${self:custom.configsTableName}
    DOCTORS_TABLE: ${self:custom.doctorsTableName}
    PATIENTS_TABLE: ${self:custom.patientsTableName}
    FACILITIES_TABLE: ${self:custom.facilitiesTableName}
    APP_URL: ${env:APP_URL}
    GOOGLE_APPLICATION_CREDENTIALS: ${env:GOOGLE_APPLICATION_CREDENTIALS}
    OPENTOK_API_KEY: ${env:OPENTOK_API_KEY}
    OPENTOK_API_SECRET: ${env:OPENTOK_API_SECRET}
    DOCTOR_INACTIVITY_TIMEOUT_IN_MINUTES: ${env:DOCTOR_INACTIVITY_TIMEOUT_IN_MINUTES, '35'}

functions:
  doctorAuthorizer:
    handler: functions/api/doctor-authorizer.handler

  adminAuthorizer:
    handler: functions/api/admin-authorizer.handler

  masterAuthorizer:
    handler: functions/api/master-authorizer.handler

  healthcheck:
    handler: functions/api/healthcheck.handler
    events:
      - http:
          method: GET
          path: /
          cors: true

  # Jobs
  alternate-doctor-job:
    handler: functions/jobs/alternate-doctor-job.handler
    memorySize: 1024
    timeout: 30

  # Auth
  auth:
    handler: functions/api/auth.handler
    events:
      - http:
          method: POST
          path: /auth/login
          cors: true

  # Doctors
  doctors-get:
    handler: functions/api/doctors/get.handler
    events:
      - http:
          method: GET
          path: /doctors
          cors: true
          authorizer: adminAuthorizer

      - http:
          method: GET
          path: /doctors/cep/{cep}
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: GET
          path: /doctors/username/{username}
          cors: true
          authorizer: doctorAuthorizer

  doctors-post:
    handler: functions/api/doctors/post.handler
    memorySize: 512
    timeout: 30
    events:
      - http:
          method: POST
          path: /doctors
          cors: true
          authorizer: adminAuthorizer

      - http:
          method: POST
          path: /doctors/alternate
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: POST
          path: /doctors/conversation/{ticket}
          cors: true
          authorizer: doctorAuthorizer

  doctors-put:
    handler: functions/api/doctors/put.handler
    events:
      - http:
          method: PUT
          path: /doctors/{username}
          cors: true
          authorizer: doctorAuthorizer

  doctors-delete:
    handler: functions/api/doctors/delete.handler
    events:
      - http:
          method: DELETE
          path: /doctors/{username}
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: DELETE
          path: /doctors/conversation/{ticket}
          cors: true
          authorizer: doctorAuthorizer

  # Patients
  patients-get:
    handler: functions/api/patients/get.handler
    events:
      - http:
          method: GET
          path: /patients/cep/{cep}
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: GET
          path: /patients/ticket/{ticket}
          cors: true

  patients-post:
    handler: functions/api/patients/post.handler
    events:
      - http:
          method: POST
          path: /patients
          cors: true

  patients-put:
    handler: functions/api/patients/put.handler
    events:
      - http:
          method: PUT
          path: /patients/{ticket}
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: PUT
          path: /patients/{ticket}/feedback
          cors: true

      - http:
          method: PUT
          path: /patients/{ticket}/status/ongoing
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: PUT
          path: /patients/{ticket}/status/waiting_kit
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: PUT
          path: /patients/{ticket}/status/received_kit
          cors: true

      - http:
          method: PUT
          path: /patients/{ticket}/status/sent_kit
          cors: true

      - http:
          method: PUT
          path: /patients/{ticket}/status/finished
          cors: true
          authorizer: doctorAuthorizer

      - http:
          method: PUT
          path: /patients/{ticket}/status/gave_up
          cors: true

      - http:
          method: PUT
          path: /patients/{ticket}/messaging/token
          cors: true

  # Facilities
  facilities-get:
    handler: functions/api/facilities/get.handler
    memorySize: 1024
    timeout: 30
    events:
      - http:
          method: GET
          path: /facilities
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: GET
          path: /facilities/origin/{origin}
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: GET
          path: /facilities/origin/{origin}/destinations
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: GET
          path: /facilities/origin/{origin}/check
          cors: true

  facilities-post:
    handler: functions/api/facilities/post.handler
    events:
      - http:
          method: POST
          path: /facilities
          cors: true
          authorizer: masterAuthorizer

  facilities-put:
    handler: functions/api/facilities/put.handler
    memorySize: 1024
    timeout: 30
    events:
      - http:
          method: PUT
          path: /facilities/{origin}
          cors: true
          authorizer: masterAuthorizer

  facilities-delete:
    handler: functions/api/facilities/delete.handler
    events:
      - http:
          method: DELETE
          path: /facilities/{origin}
          cors: true
          authorizer: masterAuthorizer

      - http:
          method: DELETE
          path: /facilities/{origin}/destinations
          cors: true
          authorizer: masterAuthorizer

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    GatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: '401'
    ## Specifying the CloudFront Distribution to server your Web Application
    # WebAppCloudFrontDistribution:
    #   Type: AWS::CloudFront::Distribution
    #   Properties:
    #     DistributionConfig:
    #       Origins:
    #         - DomainName: ${self:custom.client.bucketName}.s3.amazonaws.com
    #           ## An identifier for the origin which must be unique within the distribution
    #           Id: S3-barracao-digital-development-webapp
    #           # CustomOriginConfig:
    #             # HTTPPort: 80
    #             # HTTPSPort: 443
    #             # OriginProtocolPolicy: https-only
    #           ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
    #           S3OriginConfig:
    #             OriginAccessIdentity: origin-access-identity/cloudfront/E3EBCGY6G6EE1K
    #       Enabled: 'true'
    #       ## Uncomment the following section in case you are using a custom domain
    #       Aliases:
    #         - www.barracaodigital.com
    #         - web.barracaodigital.com
    #         - dev.barracaodigital.com
    #       DefaultRootObject: index.html
    #       ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
    #       ## The only exception are files that actually exist e.h. app.js, reset.css
    #       CustomErrorResponses:
    #         - ErrorCode: 404
    #           ResponseCode: 200
    #           ResponsePagePath: /index.html
    #       DefaultCacheBehavior:
    #         AllowedMethods:
    #           - GET
    #           - HEAD
    #         ## The origin id defined above
    #         TargetOriginId: WebApp
    #         ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
    #         ForwardedValues:
    #           QueryString: 'false'
    #           Cookies:
    #             Forward: none
    #         ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
    #         ViewerProtocolPolicy: redirect-to-https
    #       ## The certificate to use when viewers use HTTPS to request objects.
    #       ViewerCertificate:
    #         AcmCertificateArn: arn:aws:acm:us-east-1:201373306222:certificate/a8852000-db78-4d56-82e5-857a5ba58469
    #         SslSupportMethod: sni-only
    #       #  CloudFrontDefaultCertificate: 'true'
    #       ## Uncomment the following section in case you want to enable logging for CloudFront requests
    #       # Logging:
    #       #   IncludeCookies: 'false'
    #       #   Bucket: mylogs.s3.amazonaws.com
    #       #   Prefix: myprefix
    # DynamoDB Tables
    ConfigsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.configsTableName}
        AttributeDefinitions:
          - AttributeName: partition
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
        KeySchema:
          - AttributeName: partition
            KeyType: HASH
          - AttributeName: sort
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        Tags:
          -
            Key: NAME
            Value: ${self:custom.configsTableName}
          -
            Key: STACK
            Value: ${self:service}
          -
            Key: STAGE
            Value: ${self:custom.stage}
          -
            Key: REGION
            Value: ${self:custom.region}
    DoctorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.doctorsTableName}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
          - AttributeName: cep
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        GlobalSecondaryIndexes:
          - IndexName: cep
            KeySchema:
              - AttributeName: cep
                KeyType: HASH
              - AttributeName: sort
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        Tags:
          -
            Key: NAME
            Value: ${self:custom.doctorsTableName}
          -
            Key: STACK
            Value: ${self:service}
          -
            Key: STAGE
            Value: ${self:custom.stage}
          -
            Key: REGION
            Value: ${self:custom.region}
    PatientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.patientsTableName}
        AttributeDefinitions:
          - AttributeName: ticket
            AttributeType: S
          - AttributeName: originCep
            AttributeType: S
          - AttributeName: sort
            AttributeType: S
        KeySchema:
          - AttributeName: ticket
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        GlobalSecondaryIndexes:
          - IndexName: originCep
            KeySchema:
              - AttributeName: originCep
                KeyType: HASH
              - AttributeName: sort
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        Tags:
          -
            Key: NAME
            Value: ${self:custom.patientsTableName}
          -
            Key: STACK
            Value: ${self:service}
          -
            Key: STAGE
            Value: ${self:custom.stage}
          -
            Key: REGION
            Value: ${self:custom.region}
    FacilitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.facilitiesTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: origin
            AttributeType: S
          - AttributeName: destination
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: origin
            KeyType: HASH
          - AttributeName: destination
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: destinationOrigin
            KeySchema:
              - AttributeName: destination
                KeyType: HASH
              - AttributeName: origin
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: type
            KeySchema:
              - AttributeName: type
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        Tags:
          -
            Key: NAME
            Value: ${self:custom.facilitiesTableName}
          -
            Key: STACK
            Value: ${self:service}
          -
            Key: STAGE
            Value: ${self:custom.stage}
          -
            Key: REGION
            Value: ${self:custom.region}
